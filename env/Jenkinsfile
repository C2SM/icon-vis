def BuildBadge = addEmbeddableBadgeConfiguration(id: "build", subject: "Build")
def TestBadge = addEmbeddableBadgeConfiguration(id: "test", subject: "Test")

def FailureEmail() = return '''
                        mail bcc: '', 
                        body: "<b>Jenkins Failure</b><br>Project: ${env.JOB_NAME}<br>Build Number: ${env.BUILD_NUMBER}<br>Build URL: ${env.BUILD_URL}" , 
                        cc: "${EMAIL_TO_2}", charset: 'UTF-8', from: '', mimeType: 'text/html', 
                        replyTo: '', subject: "Jenkins Job Failure ${NODE_NAME} -> ${env.JOB_NAME}", 
                        to: "${EMAIL_TO_1}"; 
                    '''

pipeline {
    environment {
       EMAIL_TO_1 = 'victoria.cherkas@meteoswiss.ch'
       EMAIL_TO_2 = 'victoria.cherkas@meteoswiss.ch'
    }
    agent none
    stages {
        stage('Setup') {
            parallel {
                stage('setup miniconda on daint') {
                    agent { label 'daint' }
                    environment {
                        PATH = "$WORKSPACE/miniconda/bin:$PATH"
                    }
                    steps {
                        script { 
                            BuildBadge.setStatus('running')
                        } 
                        sh 'echo "Succcess!"; exit 0'  
                    }                   
                    post {
                        failure {  
                            echo 'Cleaning up workspace'
                            deleteDir()  
                        }
                    }
                }
                stage('setup miniconda on tsa') {
                    agent { label 'tsa' }
                    environment {
                        PATH = "$WORKSPACE/miniconda/bin:$PATH"
                    }
                    steps {
                        script {
                            BuildBadge.setStatus('running')
                        }
                        sh 'echo "Succcess!"; exit 0'  
                    } 
                    post {
                        failure {  
                            echo 'Cleaning up workspace'
                            deleteDir()  
                        }
                    }
                }
            }
            post {
                failure {  
                    node('tsa') {
                        script {    
                            BuildBadge.setStatus('failing')     
                        }
                    }
                }
                success {  
                    node('tsa') {
                        script {    
                            BuildBadge.setStatus('passing')     
                        }
                    }
                }
            }
        }
        stage('Test') {
            parallel {
                stage('test on daint') {
                    agent { label 'daint' }
                    environment {
                        PATH = "$WORKSPACE/miniconda/bin:$PATH"
                    }
                    steps {
                        script { 
                            TestBadge.setStatus('running')    
                            sh '''source $WORKSPACE/miniconda/etc/profile.d/conda.sh
                            conda activate psyplot_${NODE_NAME}
                            python -m cfgrib selfcheck
                            pytest testsuite/test*'''
                        }
                    }
                    post {
                        success {  
                            mail bcc: '', 
                            body: "<b>Jenkins Success</b><br>Project: ${env.JOB_NAME}<br>Build Number: ${env.BUILD_NUMBER}<br>Build URL: ${env.BUILD_URL}" , 
                            cc: "${EMAIL_TO_2}", charset: 'UTF-8', from: '', mimeType: 'text/html', 
                            replyTo: '', subject: "Jenkins Job Success ${NODE_NAME} ->${env.JOB_NAME}", 
                            to: "${EMAIL_TO_1}";
                        } 
                        failure {  
                            script {
                                FailureEmail()
                            }

                        }
                        always {
                            archiveArtifacts artifacts: '*.log', allowEmptyArchive: true
                            echo 'Cleaning up workspace'
                            deleteDir() 
                        }
                    }
                }
                stage('test on tsa') {
                    agent { label 'tsa' }
                    environment {
                        PATH = "$WORKSPACE/miniconda/bin:$PATH"
                    }
                    steps {
                        sh '''source $WORKSPACE/miniconda/etc/profile.d/conda.sh
                            conda activate psyplot_${NODE_NAME}
                            python -m cfgrib selfcheck
                            pytest testsuite/test*'''
                    }
                    post {
                        success {  
                            mail bcc: '', 
                            body: "<b>Jenkins Success</b><br>Project: ${env.JOB_NAME}<br>Build Number: ${env.BUILD_NUMBER}<br>Build URL: ${env.BUILD_URL}" , 
                            cc: "${EMAIL_TO_2}", charset: 'UTF-8', from: '', mimeType: 'text/html', 
                            replyTo: '', subject: "Jenkins Job Success ${NODE_NAME} ->${env.JOB_NAME}", 
                            to: "${EMAIL_TO_1}";
                        } 
                        failure {  
                            mail bcc: '', 
                            body: "<b>Jenkins Failure</b><br>Project: ${env.JOB_NAME}<br>Build Number: ${env.BUILD_NUMBER}<br>Build URL: ${env.BUILD_URL}" , 
                            cc: "${EMAIL_TO_2}", charset: 'UTF-8', from: '', mimeType: 'text/html', 
                            replyTo: '', subject: "Jenkins Job Failure ${NODE_NAME} -> ${env.JOB_NAME}", 
                            to: "${EMAIL_TO_1}";  
                        }
                        always {
                            archiveArtifacts artifacts: '*.log', allowEmptyArchive: true
                            echo 'Cleaning up workspace'
                            deleteDir() 
                        }
                    }
                }
            }
            post {
                failure {
                    node('tsa') {
                        script {    
                            TestBadge.setStatus('failing')     
                        }
                    }
                }
                success {  
                    node('tsa') {
                        script {    
                            TestBadge.setStatus('passing')     
                        }
                    }
                }
            }
        }
    }
}
