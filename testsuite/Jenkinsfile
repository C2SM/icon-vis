def BuildBadge = addEmbeddableBadgeConfiguration(id: "build", subject: "Build")
def TestBadge = addEmbeddableBadgeConfiguration(id: "test", subject: "Test")

pipeline {
    options {
    // the variable $WORKSPACE is assigned dynamically at the beginning of every stage
    // and might change depending on the number of concurrent builds active.
    // We can only allow 1 concurrent build to have a consistent access to $WORKSPACE
    // Otherwise we should use stash/unstash for the miniconda installation
        disableConcurrentBuilds()
    }
    environment {
       EMAIL_TO_1 = 'victoria.cherkas@meteoswiss.ch'
       EMAIL_TO_2 = 'annika.lauber@c2sm.ethz.ch'
       CONDA_ENV_NAME = 'iconvis'
    }
    agent none
    stages {
        stage('Test') {
            matrix {
                agent { label "$NODE_NAME" }
                axes {
                    axis {
                        name 'NODE_NAME'
                        values 'balfrin'
                    }
                }
                post {
                    unsuccessful {
                        mail bcc: '',
                        body: "<b>Jenkins Failure</b><br>Project: ${env.JOB_NAME}<br>Build Number: ${env.BUILD_NUMBER}<br>Build URL: ${env.BUILD_URL}" ,
                        cc: "${EMAIL_TO_2}", charset: 'UTF-8', from: '', mimeType: 'text/html',
                        replyTo: '', subject: "Jenkins Job Failure ${NODE_NAME} -> ${env.JOB_NAME}",
                        to: "${EMAIL_TO_1}";
                        script {
                            BuildBadge.setStatus('failing')
                        }
                    }
                    success {
                        mail bcc: '',
                        body: "<b>Jenkins Success</b><br>Project: ${env.JOB_NAME}<br>Build Number: ${env.BUILD_NUMBER}<br>Build URL: ${env.BUILD_URL}" ,
                        cc: "${EMAIL_TO_2}", charset: 'UTF-8', from: '', mimeType: 'text/html',
                        replyTo: '', subject: "Jenkins Job Success ${NODE_NAME} ->${env.JOB_NAME}",
                        to: "${EMAIL_TO_1}";
                        script {
                            BuildBadge.setStatus('passing')
                        }
                    }
                    always {
                        archiveArtifacts artifacts: '*.log', allowEmptyArchive: true
                        echo 'Cleaning up workspace'
                        deleteDir()
                    }
                }
                stages {
                    stage('setup miniconda') {
                        options {
                            timeout(time: 1, unit: 'HOURS') 
                        }
                        environment {
                            PATH = "$WORKSPACE/miniconda_$NODE_NAME/bin:$PATH"
                        }
                        steps {
                            script {
                                BuildBadge.setStatus('running')
                            }
                            sh 'testsuite/setup.sh'
                        }
                        post {
                            failure {
                                archiveArtifacts artifacts: '*.log', allowEmptyArchive: true
                                echo 'Cleaning up workspace'
                                deleteDir()
                            }
                        }
                    }
                    stage('run tests') {
                        options {
                            timeout(time: 20, unit: 'MINUTES') 
                        }
                        environment {
                            PATH = "$WORKSPACE/miniconda_${NODE_NAME}/bin:$PATH"
                        }
                        steps {
                            script {
                                TestBadge.setStatus('running')
                            }
                            sh 'testsuite/test.sh'
                        }
                    }
                }
            }
        }
    }
}
